---

- name: Wait for core component start
  wait_for:
    host: "127.0.0.1"
    port: "{{ item }}"
    delay: 1
    connect_timeout: 10
    timeout: 100
  with_items:
    - "6443"
    - "{{ api_secure_port }}"
    - "10252"
    - "10251"
  register: service_started

- name: Helm server initialization
  when: helm_init and service_started
  command: "helm init"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: init_result
  until: init_result.rc == 0
  retries: 5
  delay: 2
  ignore_errors: true

- name: Copy kube-apiserver to kubelet rbac yaml
  template:
    src: "yaml/apiserver-rbac.yml.j2"
    dest: "{{ kubernetes.polices.apiserver_rbac }}"
  register: copy_apiserver_rbac

- name: Create kube-apiserver to kubelet rbac
  when: copy_apiserver_rbac and service_started
  command: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            apply -f {{ kubernetes.polices.apiserver_rbac }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2
  ignore_errors: true

- name: Check bootstrap clusterrole binding already exists
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            get clusterrolebinding | grep kubelet-bootstrap
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_bootstrap_rbac
  ignore_errors: true

- name: Create bootstrap clusterrole binding
  when: check_bootstrap_rbac.failed
  command: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
      create clusterrolebinding kubelet-bootstrap \
      --clusterrole=system:node-bootstrapper \
      --user=kubelet-bootstrap
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2
  ignore_errors: true
