---

- name: Write system variables for Kubernetes
  copy:
    content: |
      net.bridge.bridge-nf-call-ip6tables=1
      net.bridge.bridge-nf-call-iptables=1
    dest: /etc/sysctl.d/k8s.conf

- name: Enable system variables for Kubernetes
  shell: "sysctl -p /etc/sysctl.d/k8s.conf"

- name: "Set fact {{ network }} cni variable"
  set_fact:
    cni: "{{ vars[network] }}"

- name: Create Kubernetes addon directory
  file: path={{ kubernetes.dir.network }} state=directory

- name: "Config {{ cni.name }} network"
  when: network == 'flannel'
  include_tasks: config-flannel.yml

- name: "Copy {{ cni.name }} RBAC yml file"
  template: src="{{ cni.name }}/{{ cni.template.rbac }}.j2" dest={{ kubernetes.dir.network }}/{{ cni.template.rbac }}

- name: "Copy {{ cni.name }} yml file"
  template: src="{{ cni.name }}/{{ cni.template.ds }}.j2" dest={{ kubernetes.dir.network }}/{{ cni.template.ds }}

- name: "Check {{ cni.name }} cluster role already exists"
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            get clusterrole | grep {{ cni.name }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_role
  ignore_errors: true

- name: "Create {{ cni.name }} cluster role"
  when: check_role|failed
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            apply -f {{ kubernetes.dir.network }}/{{ cni.template.rbac }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: create_role

- name: "Check {{ cni.name }} daemonset is working"
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            get ds --all-namespaces | grep {{ cni.name }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_net
  ignore_errors: true

- name: "Create {{ cni.name }} network daemonset"
  when: check_net|failed
  shell: |
    {{ dir.bin }}/kubectl --kubeconfig={{ kubernetes.config.admin }} \
            apply -f {{ kubernetes.dir.network }}/{{ cni.template.ds }}
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
